
//! Autogenerated weights for `pallet_capsules`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-10-07, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `0xMenna-MacbookPro.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/titanh-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_capsules
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// pallets/capsules/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;
use crate as pallet_capsules;


pub trait WeightInfo {
    fn upload_capsule() -> Weight;
}

/// Weight functions for `pallet_capsules`.
pub struct CapsulesWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for CapsulesWeight<T> {
	/// Storage: `AppRegistrar::AppPermissions` (r:1 w:0)
	/// Proof: `AppRegistrar::AppPermissions` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Capsules::Capsules` (r:1 w:1)
	/// Proof: `Capsules::Capsules` (`max_values`: None, `max_size`: Some(2167), added: 4642, mode: `MaxEncodedLen`)
	fn upload_capsule() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `234`
		//  Estimated: `5632`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 0)
			.saturating_add(Weight::from_parts(0, 5632))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
